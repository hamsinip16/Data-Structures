/* Singly Linked List */
#include <iostream>
using namespace std;

class Node {
public:
	int data;
	Node* next;

	Node(){
		data = 0;
		next = NULL;
	}
	Node(int data){
		this->data = data;
		this->next = NULL;
	}
};

class Linkedlist {
	Node* head;

public:
	Linkedlist() { head = NULL; }
	void insertNode(int);
	void printList();
	void deleteNode(int);
};

void Linkedlist::deleteNode(int nodeData){
	Node *temp1 = head, *temp2 = NULL;
	int ListLength = 0;
	if (head == NULL) {
		cout << "List empty." << endl;
		return;
	}

	while (temp1 != NULL) {
		temp1 = temp1->next;
		ListLength++;
	}

	if (ListLength < nodeData) {
		cout << "Index out of range" << endl;
		return;
	}

	temp1 = head;
	if (nodeData == 1) {
		head = head->next;
		delete temp1;
		return;
	}

	while (nodeData-- > 1) {
		temp2 = temp1;

		temp1 = temp1->next;
	}

	temp2->next = temp1->next;

	delete temp1;
}


void Linkedlist::insertNode(int data)
{
	Node* newNode = new Node(data);

	if (head == NULL) {
		head = newNode;
		return;
	}

	Node* temp = head;
	while (temp->next != NULL) {
		temp = temp->next;
	}
	
	temp->next = newNode;
}


void Linkedlist::printList()
{
	Node* temp = head;

	// Check for empty list.
	if (head == NULL) {
		cout << "List empty" << endl;
		return;
	}

	while (temp != NULL) {
		cout << temp->data << " ";
		temp = temp->next;
	}
}


int main()
{
	Linkedlist list;

	list.insertNode(9);
	list.insertNode(8);
	list.insertNode(7);
	list.insertNode(6);
	list.insertNode(5);
	cout << "\nElements of the list are: ";

	list.printList();

	list.deleteNode(2);

	cout << "\nElements of the list are: ";
	list.printList();

	return 0;
}
 
